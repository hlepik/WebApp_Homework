
@model WebApp.ViewModels.Quizzes.ResultCreateEditViewModel

@{
    ViewData["Title"] = "Create";
}

<h1>Create</h1>

<h4>Result</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Create">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>

            @foreach (var each in Model.Questions!)
            {
                <li>@Html.DisplayFor(modelItem => each.QuestionText)</li>
                <input type="hidden" id='@(each.Id)'>

                    @if (!each.MultipleChoice)
                    {
                        <div class="form-group">
                            @foreach (var answer in each.Answers!)
                            {
                                <input type="radio" id='@(answer.Id)' name='@(answer.QuestionId)' value='@(answer.QuestionAnswer)'>
                                <label for='@(answer.Id)'>@Html.DisplayFor(modelItem => answer.QuestionAnswer)</label><br>
                            }
                        </div>
                    }
                    else
                    {
                        <div class="form-group">
                            @foreach (var answer in each.Answers!)
                            {
                                <input type="checkbox" id='@(answer.Id)' name='@(answer.QuestionId)' value='@(answer.QuestionAnswer)'>
                                <label for='@(answer.Id)'>@Html.DisplayFor(modelItem => answer.QuestionAnswer)</label><br>
                            }
                        </div>
                    }

            }

            <div class="form-group">
                <input type="submit" value="Submit" class="btn btn-primary" />
            </div>
        </form>

    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
